Avaliação Java / Spring: API Rest para Controle de Contatos

Descrição do Projeto
[] O desafio consiste em criar uma aplicação API Rest para gerenciar um sistema de
cadastro de Pessoas e seus respectivos Contatos, onde cada Pessoa pode ter vários Contatos. O
principal objetivo é permitir que operações CRUD (Criar, Ler, Atualizar, Deletar) sejam realizadas
na estrutura de Pessoas e Contatos. 

[X] Utilizar segurança JWT.


Requisitos Técnicos
[X] • A aplicação deve ser criada utilizando Java com Spring Boot (Versão 3.1.9).
[X] • Utilize JPA/Hibernate para persistência de dados, com banco de dados MySQL como implementado em aula/exemplo: o https://github.com/eduardohen1/Java2024Itau/tree/main/AppProdutos
[] • Implemente tratamento dos dados de entrada e validações necessárias.
[X] • A API deve ser documentada utilizando a biblioteca OpenAPI (Swagger).


Funcionalidades Necessárias
1. CRUD de Pessoas:
[X] a. Criar Pessoa
[X] b. Obter Pessoa por ID
[X] c. Obter Pessoa por ID para mala direta
[X] d. Listar todas as Pessoas
[X] e. Atualizar Pessoa por ID
[X] f. Deletar Pessoa por ID

2. CRUD de Contatos:
[X] a. Adicionar um novo Contato a uma Pessoa
[X] b. Obter Contato por ID
[X] c. Listar todos os Contatos de uma Pessoa
[X] d. Atualizar Contato por ID
[X] e. Deletar Contato por ID

Modelagem Sugerida
• Pessoa: deve conter, pelo menos, os seguintes campos:
[X] o ID (único, não pode ser nulo)
[X] o Nome (não pode ser nulo)
[X] o Endereço (pode ser nulo)
[X] o CEP (pode ser nulo)
[X] o Cidade (pode ser nulo)
[X] o UF (pode ser nulo)

• Contato: deve conter, pelo menos, os seguintes campos:
[X] o ID (único, não pode ser nulo)
[X] o Tipo contato (não pode ser nulo) [inteiro] (Utilize esse conceito: 0 Telefone, 1
[X] Celular)
[X] o Contato (não pode ser nulo)
[X] o Relacionamento com a entidade Pessoa [1 pessoa para vários contatos – pesquisar!]




Endpoints Necessários
o Segurança:
[X] o GET /token (solicitar token de acesso)

o Pessoa:
[X] o POST /api/pessoas (cria uma nova Pessoa)
[X] o GET /api/pessoas/{id} (retorna os dados de uma Pessoa por ID)
[X] o GET /api/pessoas/maladireta/{id} (retorna os dados de uma Pessoa por ID para mala direta)
        ▪ No endpoint de mala direta, utilizar o conceito de DTO. Este conceito cria uma classe diferente da classe Pessoa, com apenas os dados que precisamos (pesquisar!). Dê preferência para a criação de Records (Java 17+).
        ▪ Utilizar os campos para o DTO: ID; Nome; Concatenação do Endereço, CEP, Cidade, UF 
            • Exemplo:
                {
                    “ID”: 1,
                    “Nome”: “Fulano”,
                    “MalaDireta”: “Rua A, 1 – CEP: 11111-000 – Cidade/UF”
                }

[X] o GET /api/pessoas (lista todas as Pessoas)
[X] o PUT /api/pessoas/{id} (atualiza uma Pessoa existente)
[X] o DELETE /api/pessoas/{id} (remove uma Pessoa por ID)


o Contato:
[X] o POST /api/pessoas/{id}/contatos (adiciona um novo Contato a uma Pessoa)
[X] o GET /api/contatos/{id} (retorna os dados de um Contato por ID)
[X] o GET /api/pessoas/{idPessoa}/contatos (lista todos os Contatos de uma Pessoa)
[X] o PUT /api/contatos/{id} (atualiza um Contato existente)
[X] o DELETE /api/contatos/{id} (remove um Contato por ID)

Critérios de Avaliação
[X] o Cumprimento dos requisitos funcionais.
[X] o Organização do código, incluindo estrutura, clareza e limpeza.
[X] o Implementação correta do relacionamento entre entidades (Pessoas e Contatos).
[X] o Uso adequado de padrões de design e melhores práticas do Spring.
[] o Documentação da API com OpenAPI (Swagger), incluindo descrições claras (nas classes de controllers, antes da anotação de @GetMapping e demais, utilizar a anotação do Swagger @Operation(summary = “explicação do endpoint aqui!”)).
[] o Estratégias de tratamento e validações dos dados de entrada.
[X] o Configuração adequada do ambiente de persistência do JPA/Hibernate.
[X] o Segurança JWT da aplicação; liberar os endpoints somente via token.


Instruções de Entrega
[] o O código deve estar disponível no repositório público GitHub (obs.: criar o repositório em modo público).
[] o Incluir um README com instruções sobre como executar a aplicação, como adquirir o token de acesso, qual banco de dados utilizado, e como acessar a documentação do OpenAPI:
[] o http://localhost:8080/swagger-ui.html.
[] o Enviar o link do repositório no GitHub para entrega:
[] o Entrar na sala Google Classroom:
    ▪ https://classroom.google.com/c/NjY3Mjg0MDk2MTky?cjc=6x6kg7k
[] o Fazer a entrega da atividade nesta plataforma.

[] Prazo de Entrega o 12/03/2024
Bons estudos e bom trabalho!